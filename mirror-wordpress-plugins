#!/usr/bin/env ruby

require "bundler/setup"
require "dotenv"
require "English"
require "json"
require "rubygems"
require "zip"

Dotenv.load

# Generic error class, can be caught but should not be raised.
class PluginUpdateError < StandardError
end

# Could not retrieve information about a given plugin.
class WordPressPluginApiError < PluginUpdateError
end

# Could retrieve API information but it included an error.
class WordPressPluginJSONContainsError < PluginUpdateError
  attr_reader :reason
  def initialize(msg = "Error from wordpress.org", reason = "")
    @reason = reason
    super(msg)
  end
end

# Could not download a .zip file for a given plugin.
class WordPressPluginDownloadError < PluginUpdateError
end

# Could not unzip the .zip file for a given plugin.
class WordPressPluginUnzipError < PluginUpdateError
end

# Could not perform Git action on repo. Only useful for interacting with remotes.
class GitError < PluginUpdateError
end

# A PluginUpdater is a representation of a GitHub repository that mirrors a
# plugin from wordpress.org. PluginUpdaters are responsible for updating
# their related repositories.
class PluginUpdater
  attr_reader :slug, :repo, :github_url, :topics, :full_path_to_clone, :wordpress_api_url, :wordpress_download_link,
    :latest_github_version, :latest_wordpress_version

  @@wordpress_api_url = "https://api.wordpress.org/plugins/info/1.0/".freeze
  @@skip_mirror_topic = "skip-mirror".freeze

  def initialize(name, github_url, topics)
    @slug = name
    @repo = "#{ENV.fetch("GH_ORG_NAME")}/#{@slug}"
    @github_url = github_url
    @github_https_url = "#{@github_url}.git"
    @topics = topics
    @full_path_to_clone = File.join(Dir.pwd, @slug)
    @wordpress_api_url = "#{@@wordpress_api_url}#{@slug.downcase}.json"
  end

  def self.skip_mirror_topic
    @@skip_mirror_topic
  end

  def fetch_api_information
    @latest_github_version = fetch_latest_github_version
    @latest_wordpress_version, @wordpress_download_link = fetch_latest_wordpress_info_and_annotate_repo
    @zip_file = "#{@full_path_to_clone}-#{@latest_wordpress_version}.zip"
  end

  def repos_need_updating?
    puts "==> #{@slug} is #{@latest_wordpress_version} on WordPress and #{@latest_github_version} on GitHub"
    if @latest_github_version === "" || @latest_github_version === "v"
      # Repo is empty, or at least has no tags.
      return true
    end
    # We have sometimes ended up with tags that start `vv` instead of `v`. Probably
    # due to `v...` tags on WordPress that then had `v` prepended to them. Where
    # this has happened once we have deleted the tag, where it has happened on
    # every release we have not.
    wordpress_semver = @latest_wordpress_version.start_with?("vv") ? Gem::Version.new(@latest_wordpress_version[2..]) : Gem::Version.new(@latest_wordpress_version[1..])
    github_semver = @latest_github_version.start_with?("vv") ? Gem::Version.new(@latest_github_version[2..]) : Gem::Version.new(@latest_github_version[1..])
    wordpress_semver > github_semver
  end

  def annotate_github_mirror(value, prefix = "")
    new_topic = RepositoryTopic.new(value, @repo, prefix)
    if @topics.include? new_topic.value
      puts "==> #{@slug} already has a #{new_topic.value} topic set"
    end
    if !prefix.empty?
      @topics.each do |topic|
        if topic.start_with?("#{prefix}:")
          RepositoryTopic.new(topic.split(":")[1], @repo, prefix).remove_from_repo
        end
      end
    end
    new_topic.add_to_repo
  end

  def update_github_mirror
    puts "==> Cloning the #{@slug} GitHub repo..."
    `git clone #{construct_github_https_url} #{@full_path_to_clone}`
    raise GitError, "Could not clone #{@github_url}" unless $CHILD_STATUS.success?

    puts "==> Fetching and extracting latest release from wordpress.org"
    raise WordPressPluginApiError, "No download link available for #{@slug}" if @wordpress_download_link.nil?

    download_wordpress_zip(@zip_file)
    # Delete existing files in the repo
    puts "==> Deleting existing files in the repo"
    files = Dir.glob(File.join(@full_path_to_clone, "**", "*"), File::FNM_DOTMATCH)
    files.each do |file|
      next if File.directory?(file) || file.include?(".git/")

      FileUtils.rm(file)
    end
    # Then unzip into the Git directory
    puts "==> Extracting the latest release from the archive file..."
    extract_zip(@zip_file, Dir.pwd)
    puts "==> Committing and tagging the repo with full tag..."
    commit_and_tag
    `git -C #{@full_path_to_clone} status`
    puts "==> Updating the GitHub repo..."
    if dry_run?
      puts "... -- Dry run mode, no repo pushing taking place --"
    else
      `git -C #{@full_path_to_clone} push`
      `git -C #{@full_path_to_clone} push --tags --force`
      raise GitError, "Could not push to #{@github_url}" unless $CHILD_STATUS.success?
    end
    cleanup
  end

  def cleanup
    puts "==> Cleaning up downloaded files..."
    `rm -rf #{@zip_file}`
    `rm -rf #{@full_path_to_clone}`
    `rm -rf #{@tmp_files_for_plugin}`
  end

  private

  def construct_github_https_url
    credentials = ENV.fetch("GH_ACCOUNT_USERNAME") + ":" + ENV.fetch("GH_ACCOUNT_TOKEN") + "@"
    url = "https://github.com/" + ENV.fetch("GH_ORG_NAME") + "/" + @slug + ".git"
    url.insert(8, credentials)
  end

  def commit_and_tag
    `git -C #{@full_path_to_clone} add -A -f .`
    `git -C #{@full_path_to_clone} add -u`
    `git -C #{@full_path_to_clone} commit -nm #{@latest_wordpress_version}`
    force_update? ? `git -C #{@full_path_to_clone} tag -f #{@latest_wordpress_version}` : `git -C #{@full_path_to_clone} tag #{@latest_wordpress_version}`
    raise GitError, "Could not create tag #{@latest_wordpress_version}" unless $CHILD_STATUS.success?
  end

  def fetch_latest_github_version
    puts("==> Querying GitHub for latest version ...")
    latest_github_version = `gh api repos/#{ENV.fetch("GH_ORG_NAME")}/#{@slug}/git/refs/tags --jq '.[].ref' | cut -d '/' -f 3 | grep -Eo "[0-9\.]+" | sort -V | tail -n 1`
    # Assume the repo is empty and/or does not have any tags.
    return "" if latest_github_version.strip == "."
    return "" unless $CHILD_STATUS.success?
    "v#{latest_github_version.strip}"
  end

  def fetch_latest_wordpress_info_and_annotate_repo
    puts("==> Querying api.wordpress.org for latest version ...")
    api_info = `curl -s #{@wordpress_api_url}`
    raise WordPressPluginApiError, "No WordPress API info available for #{@slug}" if api_info.nil?

    begin
      plugin_info = JSON.parse(api_info)
    rescue JSON::ParserError => e
      raise WordPressPluginApiError, e.message
    end
    annotate_repo_with_wordpress_metadata(plugin_info)
    if plugin_info.key?("error")
      # Whippet Racetrack error message here was "No plugin info available for <plugin>".
      raise WordPressPluginJSONContainsError.new(plugin_info["error"].to_s, plugin_info["reason"].to_s)
    end

    latest_version_no_spaces = plugin_info["version"].tr(" ", "-").to_s
    latest_wordpress_version = latest_version_no_spaces.start_with?("v") ? latest_version_no_spaces : "v#{latest_version_no_spaces}"
    [latest_wordpress_version.strip, plugin_info["download_link"]]
  end

  def annotate_repo_with_wordpress_metadata(plugin_info)
    return unless plugin_info.key?("error")

    annotate_github_mirror(@@skip_mirror_topic)
    annotate_github_mirror(plugin_info["error"], "status")
    annotate_github_mirror(plugin_info["reason"], "reason") if plugin_info.key?("reason") && plugin_info["reason"].is_a?(String) && !plugin_info["reason"].empty?
  end

  def download_wordpress_zip(zip_file)
    `curl -s #{@wordpress_download_link} --output #{zip_file}`
  rescue => e
    raise WordPressPluginDownloadError, e.message
  end

  # Extract all files in zip_file to destination, assuming that destination
  # is a directory that already exists.
  # See: https://github.com/rubyzip/rubyzip
  def extract_zip(zip_file, destination)
    Zip::File.open(zip_file) do |zipfile|
      zipfile.each do |entry|
        destination_path = File.join(destination, entry.name)

        zipfile.extract(entry, destination_path)
      end
    end
  rescue => e
    raise WordPressPluginUnzipError, e.message
  end
end

# A repository topic is a single piece of metadata displayed on the repo page.
# This class takes strings, which will usually be from the WordPress API into
# a repository topic which can be added or removed from a repository.
#
# Example error and `reason_text` JSON values include that might be used as
# topics include:
#
#   * closed
#   * Plugin not found.
#   * Guideline Violation
#   * Security Issue
#
# These are not documented and not in a consistent format. So, we remove
# any punctuation and replace spacing with dashes before storing the string.
class RepositoryTopic
  @@separator = "-".freeze

  attr_reader :value, :repo

  def initialize(text, repo, prefix = "")
    clean_text = text.to_s.gsub(/[^a-z0-9\-\s]/i, "").downcase.gsub(/\s+/, "-")
    @value = prefix.nil? || prefix.empty? ? clean_text : "#{prefix}#{@@separator}#{clean_text}"
    @repo = repo
  end

  def add_to_repo
    puts "==> Adding topic #{@value} to repo..."
    edit_repo("add")
  end

  def remove_from_repo
    puts "==> Removing topic #{@value} from repo..."
    edit_repo("remove")
  end

  private

  def edit_repo(action)
    if dry_run? && !force_annotation?
      puts "... -- Dry run mode, no repo edits taking place --"
    else
      `gh repo edit #{@repo} --#{action}-topic #{@value}`
    end
  end
end

# Get information about organisation plugins from GitHub and transform into an
# array of PluginUpdater objects.
class PluginUpdaterBuilder
  @@max_repos_in_library = 99_999 # Effectively unlimited.

  def initialize
    @plugins = []
  end

  def build
    projects = JSON.parse(plugin_library_repos)
    puts "==> Found #{projects.size} plugins in the library"
    projects.each do |project|
      json_topics = project["repositoryTopics"]
      topics = json_topics.nil? ? [] : json_topics.map { |hash| hash["name"] }
      plugin = PluginUpdater.new(project["name"], project["url"], topics)
      next project if plugin.nil?
      @plugins.push(plugin)
    end
    @plugins
  end

  private

  def plugin_library_repos
    puts "==> Fetching all GitHub plugin repositories in the library..."
    `gh repo list #{ENV.fetch("GH_ORG_NAME")} --limit=#{@@max_repos_in_library} --json=name,url,repositoryTopics --no-archived`
  end
end

# Update all repositories in a GitHub organisation, assuming each one has been
# mirrored from wordpress.org. Optionally print a summary of the updates
# that have been performed or have errored.
class PluginLibraryUpdater
  def initialize
    @failed_updates = {}
    @updated_plugins = {}
    @skipped_plugins = []
    @start_time = nil
    @end_time = nil
  end

  def update
    @start_time = Process.clock_gettime(Process::CLOCK_MONOTONIC)
    plugins = PluginUpdaterBuilder.new.build
    plugins.each do |plugin|
      hrule
      puts "==> Checking status of #{plugin.slug}..."
      begin
        if plugin.topics.include?(PluginUpdater.skip_mirror_topic) && !annotate_skipped_repos?
          @skipped_plugins.push(plugin.slug)
          puts "==> Skipping..."
          next
        end
        plugin.fetch_api_information
      rescue WordPressPluginApiError => e
        @failed_updates[plugin.slug] =
          e.message.empty? ? "wordpress.org does not have a plugin called #{plugin.slug}" : e.message
        next plugin
      rescue WordPressPluginJSONContainsError => e
        @failed_updates[plugin.slug] =
          e.message.empty? ? "wordpress.org reported an error #{plugin.slug}" : "#{e.message} #{e.reason}"
        next plugin
      rescue WordPressPluginDownloadError => e
        @failed_updates[plugin.slug] =
          e.message.empty? ? "could not download archive for #{plugin.slug}" : e.message
        next plugin
      rescue WordPressPluginUnzipError => e
        @failed_updates[plugin.slug] =
          e.message.empty? ? "could not unzip archive for #{plugin.slug}" : e.message
        next plugin
      end
      if !plugin.repos_need_updating?
        puts "...which is already up to date with WordPress.org"
        next plugin unless force_update?
      end
      puts "...mirroring to it now"
      begin
        plugin.update_github_mirror unless plugin.topics.include? PluginUpdater.skip_mirror_topic
        @updated_plugins[plugin.slug] = plugin.latest_wordpress_version
      rescue PluginUpdateError => e
        @failed_updates[plugin.slug] = e.message
        plugin.cleanup
      end
    end
    @end_time = Process.clock_gettime(Process::CLOCK_MONOTONIC)
  end

  def print_summary
    print_skipped_plugin_summary
    print_updated_plugin_summary
    print_failed_plugin_summary
    hrule
    elapsed_time = @end_time - @start_time
    puts "==> Mirroring plugins took: #{(elapsed_time / 60).round}m#{(elapsed_time % 60).round}s."
  end

  private

  def print_skipped_plugin_summary
    return if @skipped_plugins.empty?

    hrule
    puts "==> Skipped the following #{@skipped_plugins.size} plugin(s):"
    puts
    puts @skipped_plugins
  end

  def print_updated_plugin_summary
    return if @updated_plugins.empty?

    hrule
    puts "==> Updated the following #{@updated_plugins.size} plugin(s):"
    @updated_plugins.each do |name, version|
      puts "#{name} updated to version #{version}"
    end
  end

  def print_failed_plugin_summary
    return if @failed_updates.empty?

    hrule
    puts "==> Failed to update the following #{@failed_updates.size} plugin(s):"
    @failed_updates.each do |name, error_message|
      puts
      puts "*** #{name} failed to update with message:"
      puts error_message
    end
  end

  def hrule
    puts
    puts "-----------------------------------------------------------------------"
  end
end

def dry_run?
  ENV["DRY_RUN_MIRROR"] == "true"
end

def annotate_skipped_repos?
  ENV["ANNOTATE_SKIPPED_REPOS"] == "true"
end

def force_update?
  ENV["FORCE_UPDATE_MIRROR"] == "true"
end

def force_annotation?
  ENV["FORCE_ANNOTATION"] == "true"
end

puts "==> -- Dry run mode --" if dry_run?

updater = PluginLibraryUpdater.new
updater.update
updater.print_summary
